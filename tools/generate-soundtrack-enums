#!/usr/bin/env ruby
# frozen_string_literal: true

# converts a famitracker text into a .hpp header with enums

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'

  gem 'thor'
end

require 'thor'
require_relative './nexxt'

# Tool for converting a metatile map into an assembly file
class GenerateMetatiles < Thor
  def self.exit_on_failure?
    true
  end

  desc 'generate ASM_FILE MAP_FILE', 'Generates asm file based on NEXXT map'
  method_option :syntax,
                type: :string,
                enum: %w[ca65 llvm-mos],
                default: 'ca65',
                required: false
  method_option :bank, type: :string, required: false
  method_option :label_prefix, type: :string, required: false
  def generate(s_file, map_file)
    syntax = options[:syntax]

    label_prefix = options[:label_prefix] ||
                   case syntax
                   when 'llvm-mos' then 'metatiles'
                   else '_metatiles'
                   end

    bank = options[:bank] ||
           case syntax
           when 'llvm-mos' then '.prg_rom_last'
           else 'RODATA'
           end

    bytes = File.open(map_file, 'rb', &:read).unpack('C*')
    map = NEXXT::MapFile.new(bytes)

    File.open(s_file, 'w') do |f|
      if syntax == 'llvm-mos'
        f.puts <<~PREAMBLE
          .section #{bank}
          .global #{label_prefix}_ul, #{label_prefix}_ur, #{label_prefix}_dl, #{label_prefix}_dr, #{label_prefix}_attr
        PREAMBLE
      else
        f.puts <<~PREAMBLE
          .segment "#{bank}"
          .export #{label_prefix}_ul, #{label_prefix}_ur, #{label_prefix}_dl, #{label_prefix}_dr, #{label_prefix}_attr
        PREAMBLE
      end

      map.metatiles
         .map(&:to_a)
         .transpose
         .map { |metabytes| metabytes.map { |b| format('$%02x', b) }.join(', ') }
         .zip(%w[ul ur dl dr attr])
         .each { |metabytes, type| f.puts "#{label_prefix}_#{type}: .byte #{metabytes}" }
    end
  end
end

GenerateMetatiles.start
