#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'json'
require 'thor'

# Tool for generating polyomino data
class Polyomino < Thor
  def self.exit_on_failure?
    true
  end

  desc 'data ASM_FILE JSON_FILE', 'Generates data asm file based on json'
  method_option :bank, type: :string, required: true

  def data(s_file, pieces_json)
    bank = ".prg_rom_#{options[:bank]}.rodata.polyominos"

    data = JSON.parse(File.read(pieces_json), symbolize_names: true)
    data => { pieces:, kicks:, canon: }

    File.open(s_file, 'w') do |f|
      f.puts <<~ASM
        .section #{bank}
        .global polyominos
        polyominos:
      ASM
      pieces.each do |key, values|
        values => { rotateTo: rotate_to }
        pieces[rotate_to.to_sym][:leftRotateTo] = key
      end
      canon.select! { |key| pieces.key?(key.to_sym) }
      canon.each do |key|
        f.puts ".byte piece_#{key}@mos16lo"
      end
      canon.each do |key| # rubocop:disable Style/CombinableLoops
        f.puts ".byte piece_#{key}@mos16hi"
      end
      pieces.each.with_index do |(key, values), index|
        values => { blocks:, rotateTo: rotate_to, leftRotateTo: left_rotate_to, kicks: piece_kicks }
        f.puts "piece_#{key}:"

        f.puts ".byte #{index}"

        f.puts ".word piece_#{left_rotate_to}, piece_#{rotate_to}"
        right_kick = case piece_kicks
                     when 'o'
                       'kick_type_o'
                     when 'i'
                       case key[-1]
                       when 'R' then 'kick_type_i0R'
                       when '2' then 'kick_type_iR2'
                       when 'L' then 'kick_type_i2L'
                       else 'kick_type_iL0'
                       end
                     when 'j'
                       case key[-1]
                       when 'R' then 'kick_type_j0R'
                       when '2' then 'kick_type_jR2'
                       when 'L' then 'kick_type_j2L'
                       else 'kick_type_jL0'
                       end
                     end
        left_kick = case piece_kicks
                    when 'o'
                      'kick_type_o'
                    when 'i'
                      case key[-1]
                      when 'R' then 'kick_type_i2R'
                      when '2' then 'kick_type_iL2'
                      when 'L' then 'kick_type_i0L'
                      else 'kick_type_iR0'
                      end
                    when 'j'
                      case key[-1]
                      when 'R' then 'kick_type_j2R'
                      when '2' then 'kick_type_jL2'
                      when 'L' then 'kick_type_j0L'
                      else 'kick_type_jR0'
                      end
                    end
        # pointers to lists of kick deltas for counterclockwise and clockwise rotations
        f.puts ".word #{left_kick}, #{right_kick}"

        # array [5] of (delta row, delta column), padded with zeroes
        # each pair of deltas fit in a byte
        f.puts ".byte #{blocks.size}"
        blocks.sort_by! { |delta_row, delta_column| [delta_row, delta_column] }

        bitmask = [0, 0, 0, 0]
        blocks.each do |delta_row, delta_column|
          bitmask[delta_row + 1] |= 1 << (4 + delta_column + 1) # 4 is the Spawn Column (see polyomino.hpp)
        end
        f.puts ".byte #{bitmask.join(', ')}" # although masks correspond to a WIDTH-bits value, they fit in a byte

        # Calculate bounding box limits
        left_limit = 4
        right_limit = 0
        top_limit = 4
        bottom_limit = 0
        blocks.each do |delta_row, delta_column|
          delta_column += 1
          delta_row += 1
          right_limit = delta_column if delta_column > right_limit
          left_limit = delta_column if delta_column < left_limit
          bottom_limit = delta_row if delta_row > bottom_limit
          top_limit = delta_row if delta_row < top_limit
        end
        f.puts ".byte #{left_limit}, #{right_limit}, #{top_limit}, #{bottom_limit}"

        blocks.each do |delta_row, delta_column|
          delta_column += 1
          delta_row += 1
          f.puts "  .byte #{delta_row.negative? ? 0xff : delta_row}, #{delta_column.negative? ? 0xff : delta_column}"
        end

        # alignment is only important for canon pieces
        next unless canon.include?(key.to_s)

        (5 - blocks.size).times do
          f.puts '  .byte 0, 0'
        end

        # tiles for the nametable preview of the next piece
        f.puts "  .byte #{preview_bytes(blocks).join(', ')}"
      end

      used_kicks = {}

      kicks.each do |key, values|
        if (used_key = used_kicks[values])
          f.puts "kick_type_#{key} = kick_type_#{used_key}"
          next
        end
        used_kicks[values] = key
        f.puts "kick_type_#{key}:"
        values.each do |delta_x, delta_y|
          delta_row = -delta_y
          delta_column = delta_x
          delta_x = delta_column * 16
          delta_y = delta_row * 16

          delta_row += 256 if delta_row.negative?
          delta_column += 256 if delta_column.negative?
          delta_x += 256 if delta_x.negative?
          delta_y += 256 if delta_y.negative?

          f.puts ".byte #{delta_row}, #{delta_column}"
          f.puts ".byte #{delta_x}, #{delta_y}"
        end
      end
    end
  end

  desc 'sprites CPP HEADER JSON_FILE', 'Generates sprite C++ and header based on json'
  method_option :main_bank, type: :string, required: true
  method_option :alt_bank, type: :string, required: true
  method_option :shadow_banks, type: :string, required: true

  def sprites(cpp_file, h_file, pieces_json)
    main_bank = options[:main_bank]
    alt_bank = options[:alt_bank]
    shadow_banks = options[:shadow_banks].split(/\D/)

    banks = {
      main: main_bank,
      alt: alt_bank,
      shadow1: shadow_banks[0],
      shadow2: shadow_banks[1],
      shadow3: shadow_banks[2],
      shadow4: shadow_banks[3],
      shadow5: shadow_banks[4]
    }

    namespaces = banks.to_h { |bank, _| [bank, "PolyominoMetasprite#{bank.capitalize}"] }
    namespace_consts = banks.to_h { |bank, _| [bank, "POLYOMINO_METASPRITE_#{bank.upcase}"] }

    rodatas = banks.to_h do |bank, bank_number|
      [bank, %(__attribute__((section(".prg_rom_#{bank_number}.rodata.polyominos.#{bank}"))))]
    end

    # Read the same JSON as the data method
    data = JSON.parse(File.read(pieces_json), symbolize_names: true)
    pieces = data[:pieces]

    # Sprite template for each block (relative positions and tile/attribute values)
    sprite_templates = {
      main: [
        { x: 0,  y: -1, tile: 0x44, attr: 2 },
        { x: 8,  y: -1, tile: 0x44, attr: 66 },
        { x: 0,  y: 7,  tile: 0x54, attr: 2 },
        { x: 8,  y: 7,  tile: 0x54, attr: 66 }
      ],
      alt: [
        { x: 0,  y: -1, tile: 0x44, attr: 3 },
        { x: 8,  y: -1, tile: 0x44, attr: 67 },
        { x: 0,  y: 7,  tile: 0x54, attr: 3 },
        { x: 8,  y: 7,  tile: 0x54, attr: 67 }
      ],
      shadow1: [
        { x: 0,  y: 0,  tile: 0x43, attr: 34 },
        { x: 0,  y: 8,  tile: 0x53, attr: 34 },
        { x: 8,  y: 8,  tile: 0x43, attr: 226 },
        { x: 8,  y: 0,  tile: 0x53, attr: 226 }
      ],
      shadow2: [
        { x: 0,  y: 0,  tile: 0x42, attr: 34 },
        { x: 0,  y: 8,  tile: 0x52, attr: 34 },
        { x: 8,  y: 8,  tile: 0x42, attr: 226 },
        { x: 8,  y: 0,  tile: 0x52, attr: 226 }
      ],
      shadow3: [
        { x: 0,  y: 0,  tile: 0x41, attr: 34 },
        { x: 0,  y: 8,  tile: 0x51, attr: 34 },
        { x: 8,  y: 8,  tile: 0x41, attr: 226 },
        { x: 8,  y: 0,  tile: 0x51, attr: 226 }
      ],
      shadow4: [
        { x: 4,  y: 4,  tile: 0x50, attr: 34 }
      ],
      shadow5: [
        { x: 4,  y: 4,  tile: 0x40, attr: 34 }
      ]
    }

    File.open(cpp_file, 'w') do |f|
      f.puts "#include \"#{h_file}\""

      banks.each_key do |bank|
        f.puts "namespace #{namespaces[bank]} {"

        pieces.each do |key, values|
          blocks = values[:blocks]
          f.puts "  #{namespace_consts[bank]}_RODATA const Sprite piece_#{key}[] = {"
          blocks.sort_by { |_, delta_column| delta_column % 2 }.each do |delta_row, delta_column|
            delta_column += 1
            delta_row += 1
            sprite_templates[bank].each do |template|
              x = (16 * delta_column) + template[:x]
              y = (16 * delta_row) + template[:y]
              f.puts "    { .spr = { #{x}, #{y}, 0x#{template[:tile].to_s(16)}, #{template[:attr]} } },"
            end
          end
          f.puts '    { .terminator = 0x80 } };'

          f.puts "  #{namespace_consts[bank]}_RODATA const Sprite flip_piece_#{key}[] = {"
          blocks.sort_by { |_, delta_column| (delta_column + 1) % 2 }.each do |delta_row, delta_column|
            delta_column += 1
            delta_row += 1
            sprite_templates[bank].reverse_each do |template|
              x = (16 * delta_column) + template[:x]
              y = (16 * delta_row) + template[:y]
              f.puts "    { .spr = { #{x}, #{y}, 0x#{template[:tile].to_s(16)}, #{template[:attr]} } },"
            end
          end
          f.puts '    { .terminator = 0x80 } };'
        end
        # Add array of pointers to each metasprite
        f.puts "\n  #{namespace_consts[bank]}_RODATA const Sprite* const all_pieces[] = {"
        pieces.each_key do |key|
          f.puts "    piece_#{key},"
        end
        pieces.each_key do |key| # rubocop:disable Style/CombinableLoops
          f.puts "    flip_piece_#{key},"
        end
        f.puts '  };'
        f.puts '}'
      end
    end

    File.open(h_file, 'w') do |f|
      f.puts <<~PREAMBLE
        #pragma once
        #include "common.hpp"
      PREAMBLE
      banks.each do |bank, bank_number|
        f.puts "#define #{namespace_consts[bank]}_RODATA #{rodatas[bank]}"
        f.puts "#define #{namespace_consts[bank]}_BANK #{bank_number}"
        f.puts "namespace #{namespaces[bank]} {"
        pieces.each_key do |key|
          f.puts "  extern #{namespace_consts[bank]}_RODATA const Sprite piece_#{key}[];"
          f.puts "  extern #{namespace_consts[bank]}_RODATA const Sprite flip_piece_#{key}[];"
        end
        f.puts "  extern #{namespace_consts[bank]}_RODATA const Sprite* const all_pieces[];"
        f.puts '  enum class Piece_Id : u8 {'
        pieces.each_key do |key|
          f.puts "    #{key},"
        end
        f.puts '    FlipStart,' # the flipped pieces have the same index as the original ones + FlipStart
        f.puts '  };'
        f.puts '}'
      end
    end
  end

  PREVIEW_BASE_TILE = 0x70

  private

  def preview_byte(block_matrix, row_offset, column_offset)
    (block_matrix[row_offset + 1][column_offset + 1] * 1) +
      (block_matrix[row_offset + 1][column_offset + 0] * 2) +
      (block_matrix[row_offset + 0][column_offset + 1] * 4) +
      (block_matrix[row_offset + 0][column_offset + 0] * 8) +
      PREVIEW_BASE_TILE
  end

  def preview_bytes(blocks)
    block_matrix = Array.new(4) { Array.new(4) { 0 } }
    blocks.each do |delta_row, delta_column|
      block_matrix[delta_row + 1][delta_column + 1] = 1
    end

    [
      preview_byte(block_matrix, 0, 0),
      preview_byte(block_matrix, 0, 2),
      preview_byte(block_matrix, 2, 0),
      preview_byte(block_matrix, 2, 2)
    ]
  end
end

Polyomino.start
